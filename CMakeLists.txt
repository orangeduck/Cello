CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/)

PROJECT(Cello "C")

# Versioning
SET(CELLO_VERSION_MAJOR 0)
SET(CELLO_VERSION_MINOR 9)
SET(CELLO_VERSION_PATCH 3)
SET(CELLO_VERSION_STRING
    ${CELLO_VERSION_MAJOR}.${CELLO_VERSION_MINOR}.${CELLO_VERSION_PATCH})

# Build options
SET(CMAKE_C_COMPILER "gcc")

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

OPTION(BUILD_SHARED_LIBS "Build Cello as a shared library" ON)
OPTION(BUILD_STATIC_LIBS "Build Cello as a static library" OFF)

# Compilation flags
IF ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
    SET(CMAKE_COMPILER_IS_CLANG TRUE)
ENDIF()
IF( CMAKE_COMPILER_IS_CLANG OR CMAKE_COMPILER_IS_GNUCC)
    SET(CMAKE_C_FLAGS_DEBUG "-g -O2")
    SET(CMAKE_C_FLAGS_RELEASE "-DNDEBUG -O2")

    ADD_DEFINITIONS(-std=gnu99 -Wall -Wextra)
    #ADD_DEFINITIONS(-fnested-functions)
    IF(NOT CMAKE_COMPILER_IS_CLANG)
        ADD_DEFINITIONS(-Wno-unused)
    ENDIF()
ELSE()
    IF(MSVC)
        SET(CMAKE_C_FLAGS_DEBUG "-Zi /O2")
        SET(CMAKE_C_FLAGS_RELEASE "-DNDEBUG /O2")

        ADD_DEFINITIONS(/Wall)
    ENDIF()
ENDIF()

# Platform checks
INCLUDE(configure)
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config.h.cmake ${PROJECT_SOURCE_DIR}/config.h)
ADD_DEFINITIONS(-DHAVE_CONFIG_H)

# Define where are headers
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)

# Build library
ADD_SUBDIRECTORY(src)

# Build UnitTests
ADD_SUBDIRECTORY(tests)

# Build demos applications
ADD_SUBDIRECTORY(demos)

INCLUDE(VimClangComplete)

